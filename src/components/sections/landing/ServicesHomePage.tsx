/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/R2Z7D4kwAAp
 */
import React, { useState, useEffect } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { servicesData } from '@/data/Services'

interface Service {
  name: string;
  description: string;
}

interface ServicesProps {
  title: string;
  services: Service[];
}

export async function getServicesData(): Promise<ServicesProps> {
  try {
    const response = await fetch('/api/sheet-data');
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error fetching services data:', error);
    throw error;
  }
}

export const ServicesHomePage: React.FC = () => {
  const [servicesData, setServicesData] = useState<ServicesProps | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    async function fetchServicesData() {
      try {
        const data = await getServicesData();
        setServicesData(data);
        setIsLoading(false);
      } catch (err) {
        setError('Error fetching services data');
        setIsLoading(false);
        console.error('Error fetching services data:', err);
      }
    }
    fetchServicesData();
  }, []);

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gray-900"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex justify-center items-center h-64 text-red-500">
        {error}
      </div>
    );
  }

  if (!servicesData || !servicesData.services || servicesData.services.length === 0) {
    console.warn('servicesData is undefined or empty:', servicesData);
    return null;
  }

  return (
    <Card className="mx-4 border-0 shad">
      <CardContent className="p-4">
        <h2 className="text-3xl font-bold text-[#FF8B66] mb-4">{servicesData.title}</h2>
        <div className="grid gap-6 md:grid-cols-2">
          {servicesData.services.map((service, index) => (
            <div key={index} className="flex items-center space-x-4">
              <div className="w-6 h-6 bg-[#FF8B66] rounded-full" />
              <p className="text-lg font-bold text-[#4B5563]">
                <span className="text-[#FF8B66] font-bold">{service.name}:</span>
                {service.description}
              </p>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
};